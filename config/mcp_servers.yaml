# MCP Server Configuration
# This file configures MCP (Model Context Protocol) servers for SimaCode

# Global MCP settings
mcp:
  enabled: true
  timeout: 60
  max_concurrent: 5
  log_level: INFO
  cache_ttl: 300
  health_check_interval: 30
  # Content forwarding URL configuration
  forward_url: "${FORWARD_URL:-http://localhost/smc_forward}"

# MCP server definitions
servers:
  # File System Access Server
  filesystem:
    name: filesystem
    enabled: false  # Enabled for project use
    type: stdio
    command: ["python", "tools/mcp_filesystem_server.py"]
    args: ["--root", "."]
    environment:
      WORKSPACE_ROOT: "."
    working_directory: null
    timeout: 60
    max_retries: 3
    retry_delay: 2.0
    security:
      allowed_operations: ["read", "write", "list", "create", "delete"]
      allowed_paths: [".", "/tmp"]
      forbidden_paths: ["/etc", "/usr", "/sys", "/proc", "/root"]
      max_execution_time: 60
      network_access: false

  # GitHub Integration Server
  github:
    name: github
    enabled: false  # Disabled by default - requires GITHUB_TOKEN
    type: subprocess
    command: ["npx", "@modelcontextprotocol/server-github"]
    args: ["--token", "${GITHUB_TOKEN}"]
    environment:
      GITHUB_TOKEN: "${GITHUB_TOKEN}"
    working_directory: null
    timeout: 120
    max_retries: 3
    retry_delay: 2.0
    security:
      allowed_operations:
        - "read_repository"
        - "list_issues"
        - "list_pull_requests"
        - "read_file"
      allowed_paths: []
      forbidden_paths: []
      max_execution_time: 120
      network_access: true

  # SQLite Database Server (Example)
  sqlite:
    name: sqlite
    enabled: false  # Disabled by default
    type: subprocess
    command: ["python", "-m", "mcp_server_sqlite"]
    args: ["--db-path", "${DATABASE_PATH:-./data.db}"]
    environment:
      DATABASE_PATH: "${DATABASE_PATH:-./data.db}"
    working_directory: null
    timeout: 30
    max_retries: 3
    retry_delay: 1.0
    security:
      allowed_operations:
        - "query"
        - "schema"
      allowed_paths: ["${DATABASE_PATH:-./data.db}"]
      forbidden_paths: []
      max_execution_time: 30
      network_access: false

  # System Monitor MCP Server (Stdio)
  system_monitor:
    name: system_monitor
    enabled: true  # Enable for system monitoring demo
    type: stdio
    command: ["python", "tools/mcp_system_monitor_stdio_server.py"]
    args: []
    environment: {}
    working_directory: null
    timeout: 30
    max_retries: 3
    retry_delay: 2.0
    security:
      allowed_operations:
        - "read"
        - "execute"
      allowed_paths: ["/", "/tmp", "/var"]
      forbidden_paths: []
      max_execution_time: 30
      network_access: true

  # UI-TARS MCP Server (HTTP/WebSocket)
  # Note: Server must be started manually using: python tools/mcp_browser_agent_tars_automation.py
  agent_tars:
    name: agent_tars
    enabled: true  # WebSocket compatibility fixed
    type: websocket
    url: "${UI_TARS_MCP_URL:-ws://localhost:10001/mcp/ws}"
    headers:
      User-Agent: "SimaCode-MCP-Client/1.0"
    command: []  # No auto-start - server must be started manually
    args: []
    environment:
      UI_TARS_MCP_URL: "${UI_TARS_MCP_URL:-ws://localhost:10001/mcp/ws}"
    working_directory: null
    timeout: 300  # Longer timeout for UI operations
    max_retries: 3
    retry_delay: 2.0
    security:
      allowed_operations:
        - "web_interaction"
        - "verification_handling"
      allowed_paths: []
      forbidden_paths: []
      max_execution_time: 300
      network_access: true

  # Example HTTP/WebSocket MCP Server Template
  web_server:
    name: web_server
    enabled: false  # Disabled by default
    type: websocket
    url: "${MCP_SERVER_URL:-ws://localhost:8080/mcp}"
    command: []  # Not used for websocket type
    args: []
    environment:
      MCP_SERVER_URL: "${MCP_SERVER_URL:-ws://localhost:8080/mcp}"
    working_directory: null
    timeout: 30
    max_retries: 3
    retry_delay: 1.0
    security:
      allowed_operations: []
      allowed_paths: []
      forbidden_paths: []
      max_execution_time: 60
      network_access: true

  # Browser-use MCP Proxy Server (WebSocket) - AI-driven Browser Automation via Remote REST Service
  # Note: Server must be started manually using: python tools/mcp_browser_use_proxy_server.py
  browser_use_proxy:
    name: browser_use_proxy
    enabled: false  # Enable for remote browser-use integration
    type: websocket
    url: "${BROWSER_USE_PROXY_URL:-ws://localhost:8082/mcp/ws}"
    headers:
      User-Agent: "SimaCode-MCP-Client/1.0"
    command: []  # No auto-start - server must be started manually
    args: []
    environment:
      BROWSER_USE_PROXY_URL: "${BROWSER_USE_PROXY_URL:-ws://localhost:8082/mcp/ws}"
      BROWSER_USE_REST_URL: "${BROWSER_USE_REST_URL:-http://localhost:8000}"
      BROWSER_USE_TIMEOUT: "${BROWSER_USE_TIMEOUT:-600}"
      BROWSER_USE_MAX_RETRIES: "${BROWSER_USE_MAX_RETRIES:-3}"
      BROWSER_USE_RETRY_DELAY: "${BROWSER_USE_RETRY_DELAY:-2.0}"
    working_directory: null
    timeout: 300  # Longer timeout for complex browser automation tasks
    max_retries: 3
    retry_delay: 2.0
    security:
      allowed_operations:
        - "browser_use_execute_task"
      allowed_paths: []  # Browser automation doesn't need file system access
      forbidden_paths: []
      max_execution_time: 300
      network_access: true  # Required for browser automation and HTTP proxy

  # Email IMAP MCP Server (stdio) - Email checking and retrieval via IMAP
  # Configuration is now loaded directly from .simacode/config.yaml
  email_imap:
    name: email_imap
    enabled: true  # Enable for email automation features
    type: stdio
    command: ["python", "tools/mcp_imap_receive_email.py"]
    args: ["--config", ".simacode/config.yaml"]
    environment: {}  # No environment variables needed - configuration loaded from .simacode/config.yaml
    working_directory: null
    timeout: 120  # Email operations can take some time, especially for slower IMAP servers
    max_retries: 3
    retry_delay: 2.0
    security:
      allowed_operations:
        - "read"      # Allow reading operations (get_email, get_recent_emails, list_folders)
        - "execute"   # Allow general execution operations  
        - "access"    # Allow access operations (check_emails)
      allowed_paths: []  # Email operations don't need file system access
      forbidden_paths: []
      max_execution_time: 60
      network_access: true  # Required for IMAP connections

  # Email SMTP MCP Server (stdio) - Email sending via SMTP with comprehensive validation
  email_smtp:
    name: email_smtp
    enabled: true  # Enable for email sending automation features
    type: stdio
    command: ["python", "tools/mcp_smtp_send_email.py"]
    args: []
    environment:
      EMAIL_SMTP_SERVER: "${EMAIL_SMTP_SERVER:-smtp.gmail.com}"
      EMAIL_SMTP_PORT: "${EMAIL_SMTP_PORT:-587}"
      EMAIL_USERNAME: "${EMAIL_USERNAME}"
      EMAIL_PASSWORD: "${EMAIL_PASSWORD}"
      EMAIL_FROM_NAME: "${EMAIL_FROM_NAME:-SimaCode Assistant}"
      EMAIL_FROM_EMAIL: "${EMAIL_FROM_EMAIL}"
      EMAIL_TIMEOUT: "${EMAIL_TIMEOUT:-60}"
    working_directory: null
    timeout: 120  # Email sending operations can take time
    max_retries: 3
    retry_delay: 2.0
    security:
      allowed_operations:
        - "send"      # Allow email sending operations
        - "execute"   # Allow general execution operations
        - "validate"  # Allow email validation operations
      allowed_paths: []  # SMTP operations don't need file system access (except for attachments)
      forbidden_paths: []
      max_execution_time: 90
      network_access: true  # Required for SMTP connections

  # TICMaker WebSocket MCP Server - HTML页面创建和修改工具
  # Note: Server must be started manually using: python tools/mcp_ticmaker_websocket_server.py
  ticmaker:
    name: ticmaker
    enabled: true  # Enable for TICMaker WebSocket HTML generation features
    type: websocket
    url: "${TICMAKER_WS_URL:-ws://localhost:10002/mcp/ws}"
    headers:
      User-Agent: "SimaCode-MCP-Client/1.0"
    command: []  # No auto-start - server must be started manually
    args: []
    environment:
      TICMAKER_WS_URL: "${TICMAKER_WS_URL:-ws://localhost:10002/mcp/ws}"
      TICMAKER_OUTPUT_DIR: "${TICMAKER_OUTPUT_DIR:-./ticmaker_output}"
    working_directory: null
    timeout: 300  # Longer timeout for complex content generation
    max_retries: 3
    retry_delay: 2.0
    security:
      allowed_operations:
        - "create"    # Allow HTML page creation
        - "modify"    # Allow HTML page modification  
        - "read"      # Allow reading existing files
        - "write"     # Allow writing HTML files
        - "execute"   # Allow general execution operations
      allowed_paths: ["./ticmaker_output", "./", "/tmp"]  # Allow access to output directory
      forbidden_paths: ["/etc", "/usr", "/sys", "/proc", "/root"]
      max_execution_time: 300  # Extended timeout for WebSocket operations
      network_access: true  # Required for WebSocket connections

# Configuration Notes:
#
# 1. Environment Variables:
#    - Use ${VAR_NAME} syntax for environment variable substitution
#    - Provide defaults with ${VAR_NAME:-default_value} syntax
#    - Set environment variables before running SimaCode
#
# 2. Security:
#    - By default, most servers are disabled for security
#    - Review and configure security settings before enabling
#    - allowed_paths and forbidden_paths are enforced for file access
#    - max_execution_time prevents runaway processes
#
# 3. Server Types:
#    - subprocess: Most common, runs MCP server as child process
#    - websocket: Connects to WebSocket-based MCP server
#
# 4. To enable a server:
#    - Set enabled: true
#    - Configure required environment variables
#    - Adjust security settings as needed
#
# 5. Example environment setup:
#    export GITHUB_TOKEN="your_github_token_here"
#    export WORKSPACE_ROOT="/path/to/your/workspace"
#    export DATABASE_PATH="/path/to/your/database.db"
